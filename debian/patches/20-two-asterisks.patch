Author: Upstream (proposed by Per Cederqvist <ceder@lysator.liu.se>)
Description: The patch fixes regression with very slow regexp pattern
 processing which were converted into too complex glob patterns.
 The regression was added in version 5.44.
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=591695
Bug-Upstream: http://sourceforge.net/tracker/?func=detail&atid=113179&aid=3010684&group_id=13179
Forwarded: no
Last-updated: Sun, 05 Sep 2010 09:35:03 +0400

--- expect-5.44.1.15.orig/retoglob.c
+++ expect-5.44.1.15/retoglob.c
@@ -34,6 +34,10 @@
 			 Tcl_UniChar* str,
 			 int          strlen));
 
+static int
+ExpCountStar _ANSI_ARGS_ ((Tcl_UniChar* src, Tcl_UniChar* last));
+
+
 static char*
 xxx (Tcl_UniChar* x, int xl)
 {
@@ -465,6 +469,15 @@
   LOG (stderr,"ST '%s'\n",xxx(out,nexto-out)); FF;
 
   /*
+   * Heuristic: if there are more than two *s, the risk is far too
+   * large that the result actually is slower than the normal re
+   * matching.  So bail out.
+   */
+  if (ExpCountStar (out,nexto) > 2) {
+      goto error;
+  }
+
+  /*
    * Check if the result is actually useful.
    * Empty or just a *, or ? are not. A series
    * of ?'s is borderline, as they semi-count
@@ -717,6 +730,31 @@
   return dst;
 }
 
+static int
+ExpCountStar (src, last)
+    Tcl_UniChar* src;
+    Tcl_UniChar* last;
+{
+    int skip = 0;
+    int stars = 0;
+
+    /* Count number of *'s. State machine. The complexity is due to the
+     * need of handling escaped characters.
+     */
+
+    for (; src < last; src++) {
+	if (skip) {
+	    skip = 0;
+	} else if (*src == '\\') {
+	    skip = 1;
+	} else if (*src == '*') {
+	    stars++;
+	}
+    }
+
+    return stars;
+}
+
 #undef CHOP
 #undef CHOPC
 #undef EMIT
